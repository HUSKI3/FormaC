#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include "debug.h"

using namespace std;

int scel(string filename){
  //set states
  string state = "b";
  string finalcode = "";
  string debug = "";
  string steps = "";
  bool usingpython = false;
  //start skeleton build
  cout << "=== Building skeleton ===\n";
  //open output file
  ofstream codefile;
  codefile.open ("tmp.cpp");
  codefile << "#include <iostream>\n#include <sstream>\n#include <string>\n#include <fstream>\nusing namespace std;\n\nstring operator*(const string& s, unsigned int n) {\n   stringstream out;\n while (n--)\n       out << s;\n    return out.str();}\n string operator*(unsigned int n, const string& s) { return s * n; }";
  codefile << "\n#ifdef _WIN32\n#include <Windows.h>\n#else\n#include <unistd.h>\n#endif";
  bool ifthing = false;
  // filestream variable file 
  fstream file; 
  string word, t, q;

	  // filename of the file 
  filename = filename; 
  cout << "=== Using " << filename << " as input file ===\n";
  vector<string> tokens;

  // opening file 
  file.open(filename.c_str()); 
  #ifdef _WIN32
#include <Windows.h>
#else
#include <unistd.h>
#endif
  // extracting words from the file 
  while (file >> word) 
  { 
      // displaying content 
      //cout << word << endl; 
      tokens.push_back (word);
      if (word.find(';') != std::string::npos){
        tokens.push_back ("line-end");
      }
  } 
  for(auto & token : tokens){
    //cout << " Token: " << token << " <---- ";

    // == Import ==
    if (token == "import"){
      string steps;
      steps = *(&token + 1);
      //cout << "STEPS: " << steps;
      fstream extfile;
  string eword, et, eq;

          // filename of the file
  cout << "=== Importing " << steps << " ... ===\n";

  // opening file
  extfile.open(steps.c_str());

  // extracting words from the file
  while (extfile >> eword)
  {
      // displaying content
      //cout << word << endl;
      codefile << " " << eword << " ";
      if (eword.find(';') != std::string::npos){
        codefile << "\n";
      }
     }
    }
    else if (token.find(steps) != string::npos){
      cout << "Found STEPS BREAKING";
      codefile << "\n";
      steps = "gwrgrgwgrwgwegrgwergwe";
    }
    else if (token == "print"){
      //cout << "Print call found \n";
      codefile << "cout";
    }
    else if (token == "input"){
      //cout << "Print call found \n";
      codefile << "cin";
    }
    else if (token == "line-end"){
      //cout << "New line call found \n";
      codefile << "\n";
    }
    else if (token == "def_v"){
      codefile << " void ";
    }
    else if (token == "def"){
      codefile << " int ";
    }
    /* THE WHOLE OF THIS SECTION IS DEDICATED TO BRINGING PYTHON TO FORMA */
    /* God forbid you use this before proper release 
    as it will screw your files up bad if it goes wrong */
    /* Initialize the python object and interpreter */
    else if (token == "py_slang"){
      codefile << "\n#include \"Python.h\"\n";
      bool usingpython = true;
    }
    else if (token == "py_inter"){
      codefile << "Py_Initialize();\n";
    }
    /* Use this to create a new python object */
    else if (token == "py_obj"){
      codefile << "PyObject";
    }
    /* Use this to create a new python string (can only be assigned to a python object!) */
    else if (token == "py_string"){
      codefile << "PyString_FromString";
    }
    /* Use this to make a new python number (can only be assigned to a python object!) */
    else if (token == "py_long"){
      codefile << "PyLong_FromLong";
    }
    /* Use this to convert long to long*/
    else if (token == "py_flong"){
      codefile << "PyLong_AsLong";
    }
    /* Use this to end the python interpreter */
    else if (token == "py_kill"){
      codefile << "Py_Finalize();";
    }
    else if (token == "phase"){
      //cout << "New phase call found \n";
      codefile << "\nreturn";
    }
    else if (token == "sleep"){
      //cout << "New phase call found \n";
      codefile << "\ncout.flush();\nsleep";
    }
    else if (token == "block.object"){
      //create a block object to store multiple variables

      //cout << "New line call found \n";
      codefile << "\nclass BlockObject{ \n int id; \n bool state; \n string data; \n public: \n void getid(){cout << BlockObject::id;};\n  void getstate(){cout << BlockObject::state;};\n  void setstate(bool x){BlockObject::state = x;};\n void setid(int x){BlockObject::id = x;};};\n";
    }
    else{
      //cout << " Not defined \n";
      codefile << token << " ";
    }
  }
  codefile.close();
  //cout << "Sent some stuff to the file";
  cout << "=== Debugging ===\n";
  rundebug(filename);
  cout << "=== Compiling C++ ===\n";
  if (usingpython == false){
  system("g++ -O tmp.cpp -o out.kav");
  }
  else{
  system("g++ -O -I/usr/include/python3.7 tmp.cpp -lpython3.7 -o out.kav");
  }
  cout << "=== Cleaning ===\n";
  //system("rm -r tmp.cpp");
  cout << "=== The file can now be found as out.kav ===\n";
  return 0;
}
